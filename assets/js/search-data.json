{
  
    
        "post0": {
            "title": "Forecast CPC of a patent, given the "1' Main Claim"",
            "content": "import pandas as pd # data analysis from io import StringIO import matplotlib.pyplot as plt import numpy as np import seaborn as sns %matplotlib inline sns.set(color_codes=True) . from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.feature_selection import chi2 . Load the data . df = pd.read_csv(&#39;/content/drive/MyDrive/Colab Notebooks/DSBA Patent Project /Paper /EDA &amp; NLP /patbase_export_274777127.csv&#39;) ## df.head() . . Subset the data set for the two feature needed for the model . col = [&#39;Cooperative Patent Class&#39;, &#39;1st Main Claim&#39;] #we only use those two columns df = df[col] . df = df.dropna() . String stripping: selecting the first letter of the CPC . We can see that each patent has multiple CPC labels. For convinience, I will only use the first one. . df[&#39;cpc&#39;] = df[&#39;Cooperative Patent Class&#39;].str.extract(r&#39;(^.{0,1})&#39;) . . . Preprocessing of the man claim text . df[&#39;main_claim&#39;] = df[&#39;1st Main Claim&#39;].str.replace(&#39; [EN ] s1. s&#39;, &#39;&#39;, regex = True) # string stripping EN . . EDA of the CPC . df[&#39;cpc&#39;].nunique() . 8 . Subsetting the data set to allow Colab to do the calculations . df = df.sample(frac = 0.2) . df[&#39;category_id&#39;] = df[&#39;cpc&#39;].factorize()[0] # we add a column encodnig the cpc as # an integer because categorical variables are better represented by integers than strings. # cosa corrisponde a cosa???? . . category_id_df = df[[&#39;cpc&#39;, &#39;category_id&#39;]].drop_duplicates().sort_values(&#39;category_id&#39;) . category_id_df . cpc category_id . 12652 G | 0 | . 20654 B | 1 | . 19780 H | 2 | . 22962 A | 3 | . 14608 E | 4 | . 17091 C | 5 | . 23728 F | 6 | . 2511 D | 7 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; category_to_id = dict(category_id_df.values) # a dictionary of category to id integer . category_to_id . {&#39;A&#39;: 3, &#39;B&#39;: 1, &#39;C&#39;: 5, &#39;D&#39;: 7, &#39;E&#39;: 4, &#39;F&#39;: 6, &#39;G&#39;: 0, &#39;H&#39;: 2} . id_to_category = dict(category_id_df[[&#39;category_id&#39;, &#39;cpc&#39;]].values) # a dictionary of id integer to category . id_to_category . {0: &#39;G&#39;, 1: &#39;B&#39;, 2: &#39;H&#39;, 3: &#39;A&#39;, 4: &#39;E&#39;, 5: &#39;C&#39;, 6: &#39;F&#39;, 7: &#39;D&#39;} . fig = plt.figure(figsize=(16,5)) df.groupby(&#39;cpc&#39;).main_claim.count().plot.bar(ylim = 0) plt.show() . fig = plt.figure(figsize=(16,5)) df.groupby(&#39;category_id&#39;).main_claim.count().plot.bar(ylim = 0) plt.show() . . . Feature extraction or Vectorization . tfidf = TfidfVectorizer(sublinear_tf=True, # Apply sublinear tf scaling, i.e. replace tf with 1 + log(tf). min_df=5,# minimum numbers of documents a word must be present in to be kept. norm=&#39;l2&#39;, # I am not sure about this parameter encoding=&#39;latin-1&#39;, # I am not sure about this parameter ngram_range=(1, 2), # consider both unigrams and bigrams. stop_words=&#39;english&#39;) # remove all common pronouns features = tfidf.fit_transform(df.main_claim).toarray labels = df[&#39;cpc&#39;] features.shape . AttributeError Traceback (most recent call last) &lt;ipython-input-30-2cf75f251a85&gt; in &lt;module&gt;() 8 features = tfidf.fit_transform(df.main_claim).toarray 9 labels = df[&#39;cpc&#39;] &gt; 10 features.shape AttributeError: &#39;function&#39; object has no attribute &#39;shape&#39; . . /usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead. warnings.warn(msg, category=FutureWarning) . . . . . . 00 000 001 01 01 percent 02 05 10 10 degrees 10 min 10 nm 10 percent 100 100 parts 100 percent 1000 11 110 111 12 120 125 13 14 140 15 15 percent 150 16 17 18 180 180 degrees 19 20 20 degrees 20 percent 20 wt 200 21 ... working fluid workload workpiece world worn wound woven wrap wrapped wrapping wraps wrist write write command write data write operation write request writes writing writing data written written second wt wt percent x1 x2 x3 yield yl yoke zero zinc zirconium zn zn combinations zone zone based zones zoom zooming . 0 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 1 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 rows × 14642 columns . # for cpc, category_id in sorted(category_to_id.items()): # features_chi2 = chi2(features, labels == category_id) # indices = np.argsort(features_chi2[0]) # feature_names = np.array(tfidf.get_feature_names())[indices] # unigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 1] # bigrams = [v for v in feature_names if len(v.split(&#39; &#39;)) == 2] # print(&quot;# &#39;{}&#39;:&quot;.format(cpc)) # print(&quot; . Most correlated unigrams: n. {}&quot;.format(&#39; n. &#39;.join(unigrams[-N:]))) # print(&quot; . Most correlated bigrams: n. {}&quot;.format(&#39; n. &#39;.join(bigrams[-N:]))) . from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.naive_bayes import MultinomialNB X_train, X_test, y_train, y_test = train_test_split(df[&#39;main_claim&#39;], df[&#39;cpc&#39;], random_state = 0) count_vect = CountVectorizer() X_train_counts = count_vect.fit_transform(X_train) tfidf_transformer = TfidfTransformer() X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) MultinomialNB = MultinomialNB().fit(X_train_tfidf, y_train) . print(MultinomialNB.predict(count_vect.transform([&quot;A user device comprising: one or more processors; anda computer-readable medium storing a plurality of computer-executable components that are executable by the one or more processors to perform a plurality of actions, the plurality of actions comprising:receiving supplemental scheduling information, the supplemental scheduling information being generated based on telemetry data collected from a plurality of access points of a data network;requesting an access point of the data network for accessing a wireless local area network according to a wireless usage type, the wireless usage type based on an application running on the user device and the supplemental scheduling information; andreceiving an allocation of time-frequency divisions for accessing the wireless local area network from the access point.&quot;]))) . [&#39;G&#39;] . Model selection . from sklearn.linear_model import LogisticRegression from sklearn.ensemble import RandomForestClassifier from sklearn.svm import LinearSVC from sklearn.model_selection import cross_val_score from sklearn.naive_bayes import MultinomialNB models = [ RandomForestClassifier(n_estimators=200, max_depth=3, random_state=0), LinearSVC(), MultinomialNB(), LogisticRegression(random_state=0), ] . CV = 5 cv_df = pd.DataFrame(index=range(CV * len(models))) entries = [] for model in models: model_name = model.__class__.__name__ accuracies = cross_val_score(model, features, labels, scoring=&#39;accuracy&#39;, cv=CV) for fold_idx, accuracy in enumerate(accuracies): entries.append((model_name, fold_idx, accuracy)) cv_df = pd.DataFrame(entries, columns=[&#39;model_name&#39;, &#39;fold_idx&#39;, &#39;accuracy&#39;]) . TypeError Traceback (most recent call last) &lt;ipython-input-34-465e8950862c&gt; in &lt;module&gt;() 5 for model in models: 6 model_name = model.__class__.__name__ -&gt; 7 accuracies = cross_val_score(model, features, labels, scoring=&#39;accuracy&#39;, cv=CV) 8 for fold_idx, accuracy in enumerate(accuracies): entries.append((model_name, fold_idx, accuracy)) 9 /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py in cross_val_score(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, error_score) 518 fit_params=fit_params, 519 pre_dispatch=pre_dispatch, --&gt; 520 error_score=error_score, 521 ) 522 return cv_results[&#34;test_score&#34;] /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py in cross_validate(estimator, X, y, groups, scoring, cv, n_jobs, verbose, fit_params, pre_dispatch, return_train_score, return_estimator, error_score) 251 252 &#34;&#34;&#34; --&gt; 253 X, y, groups = indexable(X, y, groups) 254 255 cv = check_cv(cv, y, classifier=is_classifier(estimator)) /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py in indexable(*iterables) 376 377 result = [_make_indexable(X) for X in iterables] --&gt; 378 check_consistent_length(*result) 379 return result 380 /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py in check_consistent_length(*arrays) 327 &#34;&#34;&#34; 328 --&gt; 329 lengths = [_num_samples(X) for X in arrays if X is not None] 330 uniques = np.unique(lengths) 331 if len(uniques) &gt; 1: /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py in &lt;listcomp&gt;(.0) 327 &#34;&#34;&#34; 328 --&gt; 329 lengths = [_num_samples(X) for X in arrays if X is not None] 330 uniques = np.unique(lengths) 331 if len(uniques) &gt; 1: /usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py in _num_samples(x) 268 if len(x.shape) == 0: 269 raise TypeError( --&gt; 270 &#34;Singleton array %r cannot be considered a valid collection.&#34; % x 271 ) 272 # Check that shape is returning an integer or default to len TypeError: Singleton array array(&lt;bound method _cs_matrix.toarray of &lt;6203x14663 sparse matrix of type &#39;&lt;class &#39;numpy.float64&#39;&gt;&#39; with 349089 stored elements in Compressed Sparse Row format&gt;&gt;, dtype=object) cannot be considered a valid collection. . import seaborn as sns sns.boxplot(x=&#39;model_name&#39;, y=&#39;accuracy&#39;, data=cv_df) sns.stripplot(x=&#39;model_name&#39;, y=&#39;accuracy&#39;, data=cv_df, size=8, jitter=True, edgecolor=&quot;gray&quot;, linewidth=2) plt.show() . cv_df.groupby(&#39;model_name&#39;).accuracy.mean() . model_name LinearSVC 0.660002 LogisticRegression 0.645332 MultinomialNB 0.584395 RandomForestClassifier 0.381590 Name: accuracy, dtype: float64 . model = LinearSVC() X_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(features, labels, df.index, test_size=0.33, random_state=0) model.fit(X_train, y_train) y_pred = model.predict(X_test) from sklearn.metrics import confusion_matrix conf_mat = confusion_matrix(y_test, y_pred) fig, ax = plt.subplots(figsize=(10,10)) sns.heatmap(conf_mat, annot=True, fmt=&#39;d&#39;, xticklabels=category_id_df.cpc.values, yticklabels=category_id_df.cpc.values) plt.ylabel(&#39;Actual&#39;) plt.xlabel(&#39;Predicted&#39;) plt.show() . # sns.boxplot(x=&#39;model_name&#39;, y=&#39;accuracy&#39;, data=cv_df) # sns.stripplot(x=&#39;model_name&#39;, y=&#39;accuracy&#39;, data=cv_df, # size=8, jitter=True, edgecolor=&quot;gray&quot;, linewidth=2) # plt.show() .",
            "url": "https://themuahdibportfolio.github.io/test/2022/02/07/DSBA21-exam-NLP.html",
            "relUrl": "/2022/02/07/DSBA21-exam-NLP.html",
            "date": " • Feb 7, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://themuahdibportfolio.github.io/test/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://themuahdibportfolio.github.io/test/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://themuahdibportfolio.github.io/test/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://themuahdibportfolio.github.io/test/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}